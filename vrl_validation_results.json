{
  "generation": {
    "JSON": {
      "generation_success": true,
      "length": 19750,
      "original_fields": 18,
      "ecs_fields": 72,
      "conditional_logic": 67,
      "content": "\n##################################################\n## JSON Parser - ECS Field Mapping + event_data\n##################################################\n\n### ECS observer defaults\nif !exists(.observer.type) { .observer.type = \"application\" }\nif !exists(.observer.vendor) { .observer.vendor = \"json\" }\nif !exists(.observer.product) { .observer.product = \"json\" }\n\n### ECS event base defaults\nif !exists(.event.dataset) { .event.dataset = \"json.logs\" }\n.event.category = [\"application\"]\n.event.type = [\"info\"]\n.event.kind = \"event\"\n\n##################################################\n### Parse JSON message\n##################################################\nraw = to_string(.message) ?? to_string(.) ?? \"\"\n\n# Parse JSON format\njson_parsed, json_err = parse_json(raw)\n\n##################################################\n### Store ALL fields in event_data + Map to ECS\n##################################################\nif json_err == null && is_object(json_parsed) {\n    .event.dataset = \"json.logs\"\n    .observer.type = \"application\"\n    \n    # Store the entire parsed JSON in event_data for maximum field preservation\n    .event_data = json_parsed\n    \n    # ===== TIMESTAMP MAPPING =====\n    if exists(json_parsed.timestamp) { \n        .@timestamp = json_parsed.timestamp\n        .event_data.ecs_timestamp = json_parsed.timestamp\n    }\n    if exists(json_parsed.time) { \n        .@timestamp = json_parsed.time\n        .event_data.ecs_timestamp = json_parsed.time\n    }\n    if exists(json_parsed.date) { \n        .@timestamp = json_parsed.date\n        .event_data.ecs_timestamp = json_parsed.date\n    }\n    if exists(json_parsed.datetime) { \n        .@timestamp = json_parsed.datetime\n        .event_data.ecs_timestamp = json_parsed.datetime\n    }\n    \n    # ===== LOG LEVEL MAPPING =====\n    # Preserve original field names while mapping to ECS\n    if exists(json_parsed.level) {\n        .log.level = downcase(string!(json_parsed.level))\n        .event_data.original_level = json_parsed.level\n        .event_data.ecs_log_level = downcase(string!(json_parsed.level))\n    }\n    if exists(json_parsed.severity) {\n        # Only set ECS level if not already set by 'level' field\n        if !exists(.log.level) {\n            .log.level = downcase(string!(json_parsed.severity))\n        }\n        .event_data.original_severity = json_parsed.severity\n        .event_data.ecs_log_level = downcase(string!(json_parsed.severity))\n    }\n    if exists(json_parsed.priority) {\n        # Only set ECS level if not already set by 'level' or 'severity' field\n        if !exists(.log.level) {\n            .log.level = downcase(string!(json_parsed.priority))\n        }\n        .event_data.original_priority = json_parsed.priority\n        .event_data.ecs_log_level = downcase(string!(json_parsed.priority))\n    }\n    \n    # Microsoft/Azure AD level mapping to ECS\n    if exists(json_parsed.Level) { \n        level_num = to_int(json_parsed.Level) ?? 0\n        .event_data.parsed_level_num = level_num\n        .event_data.parsed_level_text = \"info\"\n        if level_num <= 2 { \n            .log.level = \"critical\"\n            .event_data.ecs_log_level = \"critical\"\n            .event_data.parsed_level_text = \"critical\"\n        }\n        if level_num == 3 { \n            .log.level = \"error\"\n            .event_data.ecs_log_level = \"error\"\n            .event_data.parsed_level_text = \"error\"\n        }\n        if level_num == 4 { \n            .log.level = \"warn\"\n            .event_data.ecs_log_level = \"warn\"\n            .event_data.parsed_level_text = \"warn\"\n        }\n        if level_num == 5 { \n            .log.level = \"info\"\n            .event_data.ecs_log_level = \"info\"\n            .event_data.parsed_level_text = \"info\"\n        }\n        if level_num >= 6 { \n            .log.level = \"debug\"\n            .event_data.ecs_log_level = \"debug\"\n            .event_data.parsed_level_text = \"debug\"\n        }\n    }\n    \n    # ===== MESSAGE MAPPING =====\n    # Preserve original field names while mapping to ECS\n    if exists(json_parsed.message) {\n        .message = json_parsed.message\n        .event_data.original_message = json_parsed.message\n        .event_data.ecs_message = json_parsed.message\n    }\n    if exists(json_parsed.msg) {\n        # Only set main message if not already set by 'message' field\n        if !exists(.message) {\n            .message = json_parsed.msg\n        }\n        .event_data.original_msg = json_parsed.msg\n        .event_data.ecs_message = json_parsed.msg\n    }\n    if exists(json_parsed.text) {\n        # Only set main message if not already set by 'message' or 'msg' field\n        if !exists(.message) {\n            .message = json_parsed.text\n        }\n        .event_data.original_text = json_parsed.text\n        .event_data.ecs_message = json_parsed.text\n    }\n    \n    # ===== HOST MAPPING =====\n    # Preserve original field names while mapping to ECS\n    if exists(json_parsed.host) { \n        .host.name = json_parsed.host\n        .event_data.original_host = json_parsed.host\n        .event_data.ecs_host_name = json_parsed.host\n    }\n    if exists(json_parsed.hostname) {\n        # Only set ECS host if not already set by 'host' field\n        if !exists(.host.name) {\n            .host.name = json_parsed.hostname\n        }\n        .event_data.original_hostname = json_parsed.hostname\n        .event_data.ecs_host_name = json_parsed.hostname\n    }\n    if exists(json_parsed.server) {\n        # Only set ECS host if not already set by 'host' or 'hostname' field\n        if !exists(.host.name) {\n            .host.name = json_parsed.server\n        }\n        .event_data.original_server = json_parsed.server\n        .event_data.ecs_host_name = json_parsed.server\n    }\n    if exists(json_parsed.computer) {\n        # Only set ECS host if not already set by other host fields\n        if !exists(.host.name) {\n            .host.name = json_parsed.computer\n        }\n        .event_data.original_computer = json_parsed.computer\n        .event_data.ecs_host_name = json_parsed.computer\n    }\n    \n    # ===== SERVICE MAPPING =====\n    if exists(json_parsed.service) { \n        .service.name = json_parsed.service\n        .event_data.ecs_service_name = json_parsed.service\n    }\n    if exists(json_parsed.app) { \n        .service.name = json_parsed.app\n        .event_data.ecs_service_name = json_parsed.app\n    }\n    if exists(json_parsed.application) { \n        .service.name = json_parsed.application\n        .event_data.ecs_service_name = json_parsed.application\n    }\n    \n    # Microsoft/Azure AD service mapping\n    if exists(json_parsed.appDisplayName) { \n        .service.name = json_parsed.appDisplayName\n        .event_data.ecs_service_name = json_parsed.appDisplayName\n    }\n    if exists(json_parsed.resourceDisplayName) { \n        .service.name = json_parsed.resourceDisplayName\n        .event_data.ecs_service_name = json_parsed.resourceDisplayName\n    }\n    \n    # ===== USER MAPPING =====\n    # Preserve original field names while mapping to ECS\n    if exists(json_parsed.user) { \n        .user.name = json_parsed.user\n        .event_data.original_user = json_parsed.user\n        .event_data.ecs_user_name = json_parsed.user\n        .event_data.parsed_user = json_parsed.user\n    }\n    if exists(json_parsed.username) {\n        # Only set ECS user if not already set by 'user' field\n        if !exists(.user.name) {\n            .user.name = json_parsed.username\n        }\n        .event_data.original_username = json_parsed.username\n        .event_data.ecs_user_name = json_parsed.username\n        .event_data.parsed_username = json_parsed.username\n    }\n    if exists(json_parsed.user_name) {\n        # Only set ECS user if not already set by 'user' or 'username' field\n        if !exists(.user.name) {\n            .user.name = json_parsed.user_name\n        }\n        .event_data.original_user_name = json_parsed.user_name\n        .event_data.ecs_user_name = json_parsed.user_name\n        .event_data.parsed_user_name = json_parsed.user_name\n    }\n    if exists(json_parsed.account) {\n        # Only set ECS user if not already set by other user fields\n        if !exists(.user.name) {\n            .user.name = json_parsed.account\n        }\n        .event_data.original_account = json_parsed.account\n        .event_data.ecs_user_name = json_parsed.account\n        .event_data.parsed_account = json_parsed.account\n    }\n    \n    # Microsoft/Azure AD user mapping\n    if exists(json_parsed.identity) { \n        .user.name = json_parsed.identity\n        .event_data.ecs_user_name = json_parsed.identity\n        .event_data.parsed_identity = json_parsed.identity\n    }\n    if exists(json_parsed.userDisplayName) { \n        .user.name = json_parsed.userDisplayName\n        .event_data.ecs_user_name = json_parsed.userDisplayName\n        .event_data.parsed_user_display_name = json_parsed.userDisplayName\n    }\n    if exists(json_parsed.userPrincipalName) { \n        .user.name = json_parsed.userPrincipalName\n        .event_data.ecs_user_name = json_parsed.userPrincipalName\n        .event_data.parsed_user_principal_name = json_parsed.userPrincipalName\n    }\n    \n    # ===== SOURCE IP MAPPING =====\n    # Preserve original field names while mapping to ECS\n    if exists(json_parsed.ip) { \n        .source.ip = json_parsed.ip\n        .event_data.original_ip = json_parsed.ip\n        .event_data.ecs_source_ip = json_parsed.ip\n        .event_data.parsed_ip = json_parsed.ip\n    }\n    if exists(json_parsed.client_ip) {\n        # Only set ECS source IP if not already set by 'ip' field\n        if !exists(.source.ip) {\n            .source.ip = json_parsed.client_ip\n        }\n        .event_data.original_client_ip = json_parsed.client_ip\n        .event_data.ecs_source_ip = json_parsed.client_ip\n        .event_data.parsed_client_ip = json_parsed.client_ip\n    }\n    if exists(json_parsed.remote_ip) {\n        # Only set ECS source IP if not already set by 'ip' or 'client_ip' field\n        if !exists(.source.ip) {\n            .source.ip = json_parsed.remote_ip\n        }\n        .event_data.original_remote_ip = json_parsed.remote_ip\n        .event_data.ecs_source_ip = json_parsed.remote_ip\n        .event_data.parsed_remote_ip = json_parsed.remote_ip\n    }\n    if exists(json_parsed.src_ip) {\n        # Only set ECS source IP if not already set by other IP fields\n        if !exists(.source.ip) {\n            .source.ip = json_parsed.src_ip\n        }\n        .event_data.original_src_ip = json_parsed.src_ip\n        .event_data.ecs_source_ip = json_parsed.src_ip\n        .event_data.parsed_src_ip = json_parsed.src_ip\n    }\n    \n    # Microsoft/Azure AD source IP mapping\n    if exists(json_parsed.callerIpAddress) { \n        .source.ip = json_parsed.callerIpAddress\n        .event_data.ecs_source_ip = json_parsed.callerIpAddress\n        .event_data.parsed_caller_ip_address = json_parsed.callerIpAddress\n    }\n    if exists(json_parsed.ipAddress) { \n        .source.ip = json_parsed.ipAddress\n        .event_data.ecs_source_ip = json_parsed.ipAddress\n        .event_data.parsed_ip_address = json_parsed.ipAddress\n    }\n    \n    # ===== DESTINATION IP MAPPING =====\n    if exists(json_parsed.dest_ip) { \n        .destination.ip = json_parsed.dest_ip\n        .event_data.ecs_destination_ip = json_parsed.dest_ip\n    }\n    if exists(json_parsed.dst_ip) { \n        .destination.ip = json_parsed.dst_ip\n        .event_data.ecs_destination_ip = json_parsed.dst_ip\n    }\n    if exists(json_parsed.destination_ip) { \n        .destination.ip = json_parsed.destination_ip\n        .event_data.ecs_destination_ip = json_parsed.destination_ip\n    }\n    if exists(json_parsed.target_ip) { \n        .destination.ip = json_parsed.target_ip\n        .event_data.ecs_destination_ip = json_parsed.target_ip\n    }\n    \n    # ===== PORT MAPPING =====\n    if exists(json_parsed.src_port) { \n        .source.port = to_int(json_parsed.src_port) ?? null\n        .event_data.ecs_source_port = to_int(json_parsed.src_port) ?? null\n    }\n    if exists(json_parsed.source_port) { \n        .source.port = to_int(json_parsed.source_port) ?? null\n        .event_data.ecs_source_port = to_int(json_parsed.source_port) ?? null\n    }\n    if exists(json_parsed.local_port) { \n        .source.port = to_int(json_parsed.local_port) ?? null\n        .event_data.ecs_source_port = to_int(json_parsed.local_port) ?? null\n    }\n    \n    if exists(json_parsed.dst_port) { \n        .destination.port = to_int(json_parsed.dst_port) ?? null\n        .event_data.ecs_destination_port = to_int(json_parsed.dst_port) ?? null\n    }\n    if exists(json_parsed.destination_port) { \n        .destination.port = to_int(json_parsed.destination_port) ?? null\n        .event_data.ecs_destination_port = to_int(json_parsed.destination_port) ?? null\n    }\n    if exists(json_parsed.port) { \n        .destination.port = to_int(json_parsed.port) ?? null\n        .event_data.ecs_destination_port = to_int(json_parsed.port) ?? null\n    }\n    \n    # ===== HTTP MAPPING =====\n    if exists(json_parsed.method) { \n        .http.request.method = upcase(string!(json_parsed.method))\n        .event_data.ecs_http_method = upcase(string!(json_parsed.method))\n    }\n    if exists(json_parsed.http_method) { \n        .http.request.method = upcase(string!(json_parsed.http_method))\n        .event_data.ecs_http_method = upcase(string!(json_parsed.http_method))\n    }\n    \n    if exists(json_parsed.url) { \n        .url.full = json_parsed.url\n        .event_data.ecs_url = json_parsed.url\n    }\n    if exists(json_parsed.uri) { \n        .url.full = json_parsed.uri\n        .event_data.ecs_url = json_parsed.uri\n    }\n    if exists(json_parsed.path) { \n        .url.path = json_parsed.path\n        .event_data.ecs_url_path = json_parsed.path\n    }\n    \n    # ===== STATUS CODE MAPPING =====\n    if exists(json_parsed.status) { \n        status_code = to_int(json_parsed.status) ?? 0\n        .http.response.status_code = status_code\n        .event_data.ecs_status_code = status_code\n        if status_code >= 200 && status_code < 300 { \n            .event.outcome = \"success\"\n            .event_data.ecs_event_outcome = \"success\"\n        }\n        if status_code >= 400 { \n            .event.outcome = \"failure\"\n            .event_data.ecs_event_outcome = \"failure\"\n        }\n    }\n    if exists(json_parsed.status_code) { \n        status_code = to_int(json_parsed.status_code) ?? 0\n        .http.response.status_code = status_code\n        .event_data.ecs_status_code = status_code\n        if status_code >= 200 && status_code < 300 { \n            .event.outcome = \"success\"\n            .event_data.ecs_event_outcome = \"success\"\n        }\n        if status_code >= 400 { \n            .event.outcome = \"failure\"\n            .event_data.ecs_event_outcome = \"failure\"\n        }\n    }\n    \n    # ===== ACTION MAPPING =====\n    if exists(json_parsed.action) { \n        .event.action = downcase(string!(json_parsed.action))\n        .event_data.ecs_event_action = downcase(string!(json_parsed.action))\n        .event_data.parsed_action = json_parsed.action\n    }\n    if exists(json_parsed.operation) { \n        .event.action = downcase(string!(json_parsed.operation))\n        .event_data.ecs_event_action = downcase(string!(json_parsed.operation))\n        .event_data.parsed_operation = json_parsed.operation\n    }\n    \n    # Microsoft/Azure AD action mapping\n    if exists(json_parsed.operationName) { \n        .event.action = downcase(string!(json_parsed.operationName))\n        .event_data.ecs_event_action = downcase(string!(json_parsed.operationName))\n        .event_data.parsed_operation_name = json_parsed.operationName\n    }\n    \n    # ===== SESSION MAPPING =====\n    if exists(json_parsed.session_id) { \n        .session.id = json_parsed.session_id\n        .event_data.ecs_session_id = json_parsed.session_id\n    }\n    if exists(json_parsed.correlation_id) { \n        .session.id = json_parsed.correlation_id\n        .event_data.ecs_session_id = json_parsed.correlation_id\n    }\n    \n    # Microsoft/Azure AD session mapping\n    if exists(json_parsed.correlationId) { \n        .session.id = json_parsed.correlationId\n        .event_data.ecs_session_id = json_parsed.correlationId\n    }\n    \n    # ===== PROTOCOL MAPPING =====\n    if exists(json_parsed.protocol) { \n        .network.protocol = downcase(string!(json_parsed.protocol))\n        .event_data.ecs_network_protocol = downcase(string!(json_parsed.protocol))\n    }\n    if exists(json_parsed.proto) { \n        .network.protocol = downcase(string!(json_parsed.proto))\n        .event_data.ecs_network_protocol = downcase(string!(json_parsed.proto))\n    }\n    \n    # Microsoft/Azure AD protocol mapping\n    if exists(json_parsed.authenticationProtocol) { \n        .network.protocol = downcase(string!(json_parsed.authenticationProtocol))\n        .event_data.ecs_network_protocol = downcase(string!(json_parsed.authenticationProtocol))\n    }\n    \n    # ===== EVENT CATEGORIZATION =====\n    if exists(json_parsed.authenticationRequirement) { \n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n        .event_data.ecs_event_category = [\"authentication\"]\n        .event_data.ecs_event_type = [\"start\"]\n    }\n    if exists(json_parsed.userType) { \n        .user.type = json_parsed.userType\n        .event_data.ecs_user_type = json_parsed.userType\n    }\n    if exists(json_parsed.isInteractive) { \n        if json_parsed.isInteractive == true { \n            .event.type = [\"start\"]\n            .event_data.ecs_event_type = [\"start\"]\n        }\n        if json_parsed.isInteractive == false { \n            .event.type = [\"info\"]\n            .event_data.ecs_event_type = [\"info\"]\n        }\n    }\n}\n\n##################################################\n### Event categorization based on content\n##################################################\nif exists(.message) {\n    msg = string!(.message)\n    \n    # Detect event categories based on message content\n    if contains(msg, \"authentication\") || contains(msg, \"login\") || contains(msg, \"sign\") {\n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n    }\n    \n    if contains(msg, \"network\") || contains(msg, \"connection\") {\n        .event.category = [\"network\"]\n        .event.type = [\"connection\"]\n    }\n    \n    if contains(msg, \"file\") || contains(msg, \"access\") {\n        .event.category = [\"file\"]\n        .event.type = [\"access\"]\n    }\n    \n    # Detect success/failure based on message content\n    if contains(msg, \"failed\") || contains(msg, \"failure\") || contains(msg, \"error\") {\n        .event.outcome = \"failure\"\n    }\n    \n    if contains(msg, \"success\") || contains(msg, \"accepted\") || contains(msg, \"completed\") {\n        .event.outcome = \"success\"\n    }\n}\n\n##################################################\n### Related entities\n##################################################\n.related.ip = []\n.related.user = []\n.related.hosts = []\n\nif exists(.source.ip) { .related.ip = push(.related.ip, .source.ip) }\nif exists(.destination.ip) { .related.ip = push(.related.ip, .destination.ip) }\nif exists(.user.name) { .related.user = push(.related.user, .user.name) }\nif exists(.host.name) { .related.hosts = push(.related.hosts, .host.name) }\n\n.related.ip = unique(flatten(.related.ip))\n.related.user = unique(flatten(.related.user))\n.related.hosts = unique(flatten(.related.hosts))\n\n##################################################\n### Timestamp and metadata\n##################################################\nif !exists(.@timestamp) {\n    .@timestamp = now()\n}\n\nif !exists(.event.created) {\n    .event.created = now()\n}\n\n.log.original = raw\n\n##################################################\n### Compact final object\n##################################################\n. = compact(., string: true, array: true, object: true, null: true)\n"
    },
    "CEF": {
      "generation_success": true,
      "length": 20523,
      "original_fields": 0,
      "ecs_fields": 64,
      "conditional_logic": 68,
      "content": "\n##################################################\n## CEF Parser - ECS Field Mapping + event_data\n##################################################\n\n### ECS observer defaults\nif !exists(.observer.type) { .observer.type = \"security\" }\nif !exists(.observer.vendor) { .observer.vendor = \"cef\" }\nif !exists(.observer.product) { .observer.product = \"cef\" }\n\n### ECS event base defaults\nif !exists(.event.dataset) { .event.dataset = \"cef.logs\" }\n.event.category = [\"security\"]\n.event.type = [\"info\"]\n.event.kind = \"event\"\n\n##################################################\n### Parse CEF message\n##################################################\nraw = to_string(.message) ?? to_string(.) ?? \"\"\n\n# Parse CEF format using GROK pattern\ncef_parsed, cef_err = parse_grok(raw, \"CEF:%{NUMBER:cef_version}|%{DATA:device_vendor}|%{DATA:device_product}|%{DATA:device_version}|%{DATA:device_event_class_id}|%{DATA:name}|%{NUMBER:severity}|%{GREEDYDATA:extension}\")\n\n##################################################\n### Store ALL fields in event_data + Map to ECS\n##################################################\nif cef_err == null && is_object(cef_parsed) {\n    .event.dataset = \"cef.logs\"\n    .observer.type = \"security\"\n    \n    # Store the entire parsed CEF in event_data for maximum field preservation\n    .event_data = cef_parsed\n    \n    # ===== CEF HEADER MAPPING =====\n    if exists(cef_parsed.cef_version) { \n        .event_data.parsed_cef_version = cef_parsed.cef_version\n        .event_data.ecs_cef_version = cef_parsed.cef_version\n    }\n    \n    if exists(cef_parsed.device_vendor) { \n        .observer.vendor = cef_parsed.device_vendor\n        .event_data.parsed_device_vendor = cef_parsed.device_vendor\n        .event_data.ecs_observer_vendor = cef_parsed.device_vendor\n    }\n    \n    if exists(cef_parsed.device_product) { \n        .observer.product = cef_parsed.device_product\n        .event_data.parsed_device_product = cef_parsed.device_product\n        .event_data.ecs_observer_product = cef_parsed.device_product\n    }\n    \n    if exists(cef_parsed.device_version) { \n        .observer.version = cef_parsed.device_version\n        .event_data.parsed_device_version = cef_parsed.device_version\n        .event_data.ecs_observer_version = cef_parsed.device_version\n    }\n    \n    if exists(cef_parsed.device_event_class_id) { \n        .event.code = cef_parsed.device_event_class_id\n        .event_data.parsed_device_event_class_id = cef_parsed.device_event_class_id\n        .event_data.ecs_event_code = cef_parsed.device_event_class_id\n    }\n    \n    if exists(cef_parsed.name) { \n        .event.action = downcase(string!(cef_parsed.name))\n        .event_data.parsed_event_name = cef_parsed.name\n        .event_data.ecs_event_action = downcase(string!(cef_parsed.name))\n    }\n    \n    if exists(cef_parsed.severity) { \n        sev = to_int(cef_parsed.severity) ?? 0\n        .event.severity = sev\n        .event_data.parsed_severity = sev\n        .event_data.ecs_event_severity = sev\n        \n        # Map CEF severity to log level\n        if sev >= 0 && sev <= 3 { \n            .log.level = \"low\"\n            .event_data.ecs_log_level = \"low\"\n        }\n        if sev >= 4 && sev <= 6 { \n            .log.level = \"medium\"\n            .event_data.ecs_log_level = \"medium\"\n        }\n        if sev >= 7 && sev <= 8 { \n            .log.level = \"high\"\n            .event_data.ecs_log_level = \"high\"\n        }\n        if sev >= 9 { \n            .log.level = \"critical\"\n            .event_data.ecs_log_level = \"critical\"\n        }\n    }\n    \n    # ===== CEF EXTENSIONS PARSING =====\n    if exists(cef_parsed.extension) {\n        extensions = cef_parsed.extension\n        cef_extensions, ext_err = parse_key_value(extensions, key_value_delimiter: \"=\", field_delimiter: \" \")\n        \n        if ext_err == null {\n            # Store all extensions in event_data\n            .event_data.parsed_extensions = cef_extensions\n            \n            # ===== SOURCE IP MAPPING =====\n            if exists(cef_extensions.src) { \n                .source.ip = cef_extensions.src\n                .event_data.parsed_src = cef_extensions.src\n                .event_data.ecs_source_ip = cef_extensions.src\n            }\n            if exists(cef_extensions.shost) { \n                .source.domain = cef_extensions.shost\n                .event_data.parsed_shost = cef_extensions.shost\n                .event_data.ecs_source_domain = cef_extensions.shost\n            }\n            if exists(cef_extensions.suser) { \n                .source.user.name = cef_extensions.suser\n                .event_data.parsed_suser = cef_extensions.suser\n                .event_data.ecs_source_user_name = cef_extensions.suser\n            }\n            if exists(cef_extensions.spt) { \n                .source.port = to_int(cef_extensions.spt) ?? null\n                .event_data.parsed_spt = cef_extensions.spt\n                .event_data.ecs_source_port = to_int(cef_extensions.spt) ?? null\n            }\n            if exists(cef_extensions.smac) { \n                .source.mac = cef_extensions.smac\n                .event_data.parsed_smac = cef_extensions.smac\n                .event_data.ecs_source_mac = cef_extensions.smac\n            }\n            \n            # ===== DESTINATION IP MAPPING =====\n            if exists(cef_extensions.dst) { \n                .destination.ip = cef_extensions.dst\n                .event_data.parsed_dst = cef_extensions.dst\n                .event_data.ecs_destination_ip = cef_extensions.dst\n            }\n            if exists(cef_extensions.dhost) { \n                .destination.domain = cef_extensions.dhost\n                .event_data.parsed_dhost = cef_extensions.dhost\n                .event_data.ecs_destination_domain = cef_extensions.dhost\n            }\n            if exists(cef_extensions.duser) { \n                .destination.user.name = cef_extensions.duser\n                .event_data.parsed_duser = cef_extensions.duser\n                .event_data.ecs_destination_user_name = cef_extensions.duser\n            }\n            if exists(cef_extensions.dpt) { \n                .destination.port = to_int(cef_extensions.dpt) ?? null\n                .event_data.parsed_dpt = cef_extensions.dpt\n                .event_data.ecs_destination_port = to_int(cef_extensions.dpt) ?? null\n            }\n            if exists(cef_extensions.dmac) { \n                .destination.mac = cef_extensions.dmac\n                .event_data.parsed_dmac = cef_extensions.dmac\n                .event_data.ecs_destination_mac = cef_extensions.dmac\n            }\n            \n            # ===== NETWORK MAPPING =====\n            if exists(cef_extensions.proto) { \n                .network.protocol = downcase(string!(cef_extensions.proto))\n                .event_data.parsed_proto = cef_extensions.proto\n                .event_data.ecs_network_protocol = downcase(string!(cef_extensions.proto))\n            }\n            if exists(cef_extensions.transport) { \n                .network.transport = downcase(string!(cef_extensions.transport))\n                .event_data.parsed_transport = cef_extensions.transport\n                .event_data.ecs_network_transport = downcase(string!(cef_extensions.transport))\n            }\n            if exists(cef_extensions.bytesIn) { \n                .network.bytes = to_int(cef_extensions.bytesIn) ?? null\n                .event_data.parsed_bytes_in = cef_extensions.bytesIn\n                .event_data.ecs_network_bytes = to_int(cef_extensions.bytesIn) ?? null\n            }\n            if exists(cef_extensions.bytesOut) { \n                .network.bytes = to_int(cef_extensions.bytesOut) ?? null\n                .event_data.parsed_bytes_out = cef_extensions.bytesOut\n                .event_data.ecs_network_bytes = to_int(cef_extensions.bytesOut) ?? null\n            }\n            if exists(cef_extensions.packetsIn) { \n                .network.packets = to_int(cef_extensions.packetsIn) ?? null\n                .event_data.parsed_packets_in = cef_extensions.packetsIn\n                .event_data.ecs_network_packets = to_int(cef_extensions.packetsIn) ?? null\n            }\n            if exists(cef_extensions.packetsOut) { \n                .network.packets = to_int(cef_extensions.packetsOut) ?? null\n                .event_data.parsed_packets_out = cef_extensions.packetsOut\n                .event_data.ecs_network_packets = to_int(cef_extensions.packetsOut) ?? null\n            }\n            \n            # ===== USER MAPPING =====\n            if exists(cef_extensions.cs1) { \n                .user.name = cef_extensions.cs1\n                .event_data.parsed_cs1 = cef_extensions.cs1\n                .event_data.ecs_user_name = cef_extensions.cs1\n            }\n            if exists(cef_extensions.cs1Label) { \n                .event_data.parsed_cs1_label = cef_extensions.cs1Label\n                .event_data.ecs_cs1_label = cef_extensions.cs1Label\n            }\n            if exists(cef_extensions.cs2) { \n                .user.id = cef_extensions.cs2\n                .event_data.parsed_cs2 = cef_extensions.cs2\n                .event_data.ecs_user_id = cef_extensions.cs2\n            }\n            if exists(cef_extensions.cs2Label) { \n                .event_data.parsed_cs2_label = cef_extensions.cs2Label\n                .event_data.ecs_cs2_label = cef_extensions.cs2Label\n            }\n            if exists(cef_extensions.cs3) { \n                .event_data.parsed_cs3 = cef_extensions.cs3\n                .event_data.ecs_cs3 = cef_extensions.cs3\n            }\n            if exists(cef_extensions.cs3Label) { \n                .event_data.parsed_cs3_label = cef_extensions.cs3Label\n                .event_data.ecs_cs3_label = cef_extensions.cs3Label\n            }\n            if exists(cef_extensions.cs4) { \n                .event_data.parsed_cs4 = cef_extensions.cs4\n                .event_data.ecs_cs4 = cef_extensions.cs4\n            }\n            if exists(cef_extensions.cs4Label) { \n                .event_data.parsed_cs4_label = cef_extensions.cs4Label\n                .event_data.ecs_cs4_label = cef_extensions.cs4Label\n            }\n            if exists(cef_extensions.cs5) { \n                .event_data.parsed_cs5 = cef_extensions.cs5\n                .event_data.ecs_cs5 = cef_extensions.cs5\n            }\n            if exists(cef_extensions.cs5Label) { \n                .event_data.parsed_cs5_label = cef_extensions.cs5Label\n                .event_data.ecs_cs5_label = cef_extensions.cs5Label\n            }\n            if exists(cef_extensions.cs6) { \n                .event_data.parsed_cs6 = cef_extensions.cs6\n                .event_data.ecs_cs6 = cef_extensions.cs6\n            }\n            if exists(cef_extensions.cs6Label) { \n                .event_data.parsed_cs6_label = cef_extensions.cs6Label\n                .event_data.ecs_cs6_label = cef_extensions.cs6Label\n            }\n            \n            # ===== ACTION MAPPING =====\n            if exists(cef_extensions.act) { \n                .event.action = downcase(string!(cef_extensions.act))\n                .event_data.parsed_act = cef_extensions.act\n                .event_data.ecs_event_action = downcase(string!(cef_extensions.act))\n            }\n            \n            # ===== OUTCOME MAPPING =====\n            if exists(cef_extensions.outcome) { \n                .event.outcome = downcase(string!(cef_extensions.outcome))\n                .event_data.parsed_outcome = cef_extensions.outcome\n                .event_data.ecs_event_outcome = downcase(string!(cef_extensions.outcome))\n            }\n            if exists(cef_extensions.result) { \n                .event.outcome = downcase(string!(cef_extensions.result))\n                .event_data.parsed_result = cef_extensions.result\n                .event_data.ecs_event_outcome = downcase(string!(cef_extensions.result))\n            }\n            \n            # ===== APPLICATION MAPPING =====\n            if exists(cef_extensions.app) { \n                .service.name = cef_extensions.app\n                .event_data.parsed_app = cef_extensions.app\n                .event_data.ecs_service_name = cef_extensions.app\n            }\n            if exists(cef_extensions.application) { \n                .service.name = cef_extensions.application\n                .event_data.parsed_application = cef_extensions.application\n                .event_data.ecs_service_name = cef_extensions.application\n            }\n            \n            # ===== FILE MAPPING =====\n            if exists(cef_extensions.fname) { \n                .file.name = cef_extensions.fname\n                .event_data.parsed_fname = cef_extensions.fname\n                .event_data.ecs_file_name = cef_extensions.fname\n            }\n            if exists(cef_extensions.fsize) { \n                .file.size = to_int(cef_extensions.fsize) ?? null\n                .event_data.parsed_fsize = cef_extensions.fsize\n                .event_data.ecs_file_size = to_int(cef_extensions.fsize) ?? null\n            }\n            if exists(cef_extensions.fileHash) { \n                .file.hash.sha256 = cef_extensions.fileHash\n                .event_data.parsed_file_hash = cef_extensions.fileHash\n                .event_data.ecs_file_hash_sha256 = cef_extensions.fileHash\n            }\n            \n            # ===== MESSAGE MAPPING =====\n            if exists(cef_extensions.msg) { \n                .message = cef_extensions.msg\n                .event_data.parsed_msg = cef_extensions.msg\n                .event_data.ecs_message = cef_extensions.msg\n            }\n            if exists(cef_extensions.message) { \n                .message = cef_extensions.message\n                .event_data.parsed_message = cef_extensions.message\n                .event_data.ecs_message = cef_extensions.message\n            }\n            \n            # ===== HOST MAPPING =====\n            if exists(cef_extensions.host) { \n                .host.name = cef_extensions.host\n                .event_data.parsed_host = cef_extensions.host\n                .event_data.ecs_host_name = cef_extensions.host\n            }\n            if exists(cef_extensions.dhost) { \n                .host.name = cef_extensions.dhost\n                .event_data.parsed_dhost = cef_extensions.dhost\n                .event_data.ecs_host_name = cef_extensions.dhost\n            }\n            \n            # ===== PROCESS MAPPING =====\n            if exists(cef_extensions.process) { \n                .process.name = cef_extensions.process\n                .event_data.parsed_process = cef_extensions.process\n                .event_data.ecs_process_name = cef_extensions.process\n            }\n            if exists(cef_extensions.processId) { \n                .process.pid = to_int(cef_extensions.processId) ?? null\n                .event_data.parsed_process_id = cef_extensions.processId\n                .event_data.ecs_process_pid = to_int(cef_extensions.processId) ?? null\n            }\n            \n            # ===== TIMESTAMP MAPPING =====\n            if exists(cef_extensions.start) { \n                .@timestamp = cef_extensions.start\n                .event_data.parsed_start = cef_extensions.start\n                .event_data.ecs_timestamp = cef_extensions.start\n            }\n            if exists(cef_extensions.end) { \n                .event.end = cef_extensions.end\n                .event_data.parsed_end = cef_extensions.end\n                .event_data.ecs_event_end = cef_extensions.end\n            }\n            if exists(cef_extensions.rt) { \n                .@timestamp = cef_extensions.rt\n                .event_data.parsed_rt = cef_extensions.rt\n                .event_data.ecs_timestamp = cef_extensions.rt\n            }\n            \n            # ===== LOCATION MAPPING =====\n            if exists(cef_extensions.locality) { \n                .geo.city_name = cef_extensions.locality\n                .event_data.parsed_locality = cef_extensions.locality\n                .event_data.ecs_geo_city = cef_extensions.locality\n            }\n            if exists(cef_extensions.region) { \n                .geo.region_name = cef_extensions.region\n                .event_data.parsed_region = cef_extensions.region\n                .event_data.ecs_geo_region = cef_extensions.region\n            }\n            if exists(cef_extensions.country) { \n                .geo.country_iso_code = cef_extensions.country\n                .event_data.parsed_country = cef_extensions.country\n                .event_data.ecs_geo_country = cef_extensions.country\n            }\n            \n            # ===== URL MAPPING =====\n            if exists(cef_extensions.request) { \n                .url.full = cef_extensions.request\n                .event_data.parsed_request = cef_extensions.request\n                .event_data.ecs_url = cef_extensions.request\n            }\n            if exists(cef_extensions.requestMethod) { \n                .http.request.method = upcase(string!(cef_extensions.requestMethod))\n                .event_data.parsed_request_method = cef_extensions.requestMethod\n                .event_data.ecs_http_method = upcase(string!(cef_extensions.requestMethod))\n            }\n            \n            # ===== HTTP STATUS MAPPING =====\n            if exists(cef_extensions.requestContext) { \n                .http.response.status_code = to_int(cef_extensions.requestContext) ?? null\n                .event_data.parsed_request_context = cef_extensions.requestContext\n                .event_data.ecs_http_status = to_int(cef_extensions.requestContext) ?? null\n            }\n            \n            # ===== CATEGORY MAPPING =====\n            if exists(cef_extensions.category) { \n                .event.category = [downcase(string!(cef_extensions.category))]\n                .event_data.parsed_category = cef_extensions.category\n                .event_data.ecs_event_category = [downcase(string!(cef_extensions.category))]\n            }\n            \n            # ===== TYPE MAPPING =====\n            if exists(cef_extensions.type) { \n                .event.type = [downcase(string!(cef_extensions.type))]\n                .event_data.parsed_type = cef_extensions.type\n                .event_data.ecs_event_type = [downcase(string!(cef_extensions.type))]\n            }\n        }\n    }\n}\n\n##################################################\n### Event categorization based on CEF fields\n##################################################\nif exists(.event.action) {\n    action = string!(.event.action)\n    \n    # Authentication events\n    if contains(action, \"login\") || contains(action, \"signin\") || contains(action, \"authentication\") {\n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n    }\n    \n    # Network events\n    if contains(action, \"connect\") || contains(action, \"disconnect\") || contains(action, \"network\") {\n        .event.category = [\"network\"]\n        .event.type = [\"connection\"]\n    }\n    \n    # File events\n    if contains(action, \"file\") || contains(action, \"access\") || contains(action, \"read\") || contains(action, \"write\") {\n        .event.category = [\"file\"]\n        .event.type = [\"access\"]\n    }\n    \n    # Process events\n    if contains(action, \"process\") || contains(action, \"execute\") || contains(action, \"launch\") {\n        .event.category = [\"process\"]\n        .event.type = [\"start\"]\n    }\n}\n\n##################################################\n### Related entities\n##################################################\n.related.ip = []\n.related.user = []\n.related.hosts = []\n\nif exists(.source.ip) { .related.ip = push(.related.ip, .source.ip) }\nif exists(.destination.ip) { .related.ip = push(.related.ip, .destination.ip) }\nif exists(.user.name) { .related.user = push(.related.user, .user.name) }\nif exists(.source.user.name) { .related.user = push(.related.user, .source.user.name) }\nif exists(.destination.user.name) { .related.user = push(.related.user, .destination.user.name) }\nif exists(.host.name) { .related.hosts = push(.related.hosts, .host.name) }\n\n.related.ip = unique(flatten(.related.ip))\n.related.user = unique(flatten(.related.user))\n.related.hosts = unique(flatten(.related.hosts))\n\n##################################################\n### Timestamp and metadata\n##################################################\nif !exists(.@timestamp) {\n    .@timestamp = now()\n}\n\nif !exists(.event.created) {\n    .event.created = now()\n}\n\n.log.original = raw\n\n##################################################\n### Compact final object\n##################################################\n. = compact(., string: true, array: true, object: true, null: true)\n"
    },
    "SYSLOG": {
      "generation_success": true,
      "length": 11951,
      "original_fields": 0,
      "ecs_fields": 49,
      "conditional_logic": 18,
      "content": "\n##################################################\n## Syslog Parser - ECS Field Mapping + event_data\n##################################################\n\n### ECS observer defaults\nif !exists(.observer.type) { .observer.type = \"system\" }\nif !exists(.observer.vendor) { .observer.vendor = \"syslog\" }\nif !exists(.observer.product) { .observer.product = \"syslog\" }\n\n### ECS event base defaults\nif !exists(.event.dataset) { .event.dataset = \"syslog.logs\" }\n.event.category = [\"network\", \"system\"]\n.event.type = [\"info\"]\n.event.kind = \"event\"\n\n##################################################\n### Parse syslog message\n##################################################\nraw = to_string(.message) ?? to_string(.) ?? \"\"\n\n# Parse Syslog format using built-in parse_syslog function\nsyslog_parsed, syslog_err = parse_syslog(raw)\n\n##################################################\n### Store ALL fields in event_data + Map to ECS\n##################################################\nif syslog_err == null && is_object(syslog_parsed) {\n    .event.dataset = \"syslog.logs\"\n    .observer.type = \"system\"\n    \n    # Store the entire parsed syslog in event_data for maximum field preservation\n    .event_data = syslog_parsed\n    \n    # ===== TIMESTAMP MAPPING =====\n    if exists(syslog_parsed.timestamp) { \n        .@timestamp = syslog_parsed.timestamp\n        .event_data.parsed_timestamp = syslog_parsed.timestamp\n        .event_data.ecs_timestamp = syslog_parsed.timestamp\n    }\n    \n    # ===== HOST MAPPING =====\n    if exists(syslog_parsed.hostname) { \n        .host.hostname = syslog_parsed.hostname\n        .host.name = syslog_parsed.hostname\n        .event_data.parsed_hostname = syslog_parsed.hostname\n        .event_data.ecs_host_hostname = syslog_parsed.hostname\n        .event_data.ecs_host_name = syslog_parsed.hostname\n    }\n    \n    # ===== SERVICE MAPPING =====\n    if exists(syslog_parsed.appname) { \n        .service.name = syslog_parsed.appname\n        .process.name = syslog_parsed.appname\n        .event_data.parsed_appname = syslog_parsed.appname\n        .event_data.ecs_service_name = syslog_parsed.appname\n        .event_data.ecs_process_name = syslog_parsed.appname\n    }\n    \n    # ===== PROCESS MAPPING =====\n    if exists(syslog_parsed.procid) { \n        .process.pid = to_int(syslog_parsed.procid) ?? null\n        .event_data.parsed_procid = syslog_parsed.procid\n        .event_data.ecs_process_pid = to_int(syslog_parsed.procid) ?? null\n    }\n    \n    # ===== MESSAGE MAPPING =====\n    if exists(syslog_parsed.message) { \n        .message = syslog_parsed.message\n        .event_data.parsed_message = syslog_parsed.message\n        .event_data.ecs_message = syslog_parsed.message\n    }\n    \n    # ===== SEVERITY MAPPING =====\n    if exists(syslog_parsed.severity) { \n        .log.syslog.severity.code = syslog_parsed.severity\n        .event_data.parsed_severity = syslog_parsed.severity\n        .event_data.ecs_log_syslog_severity_code = syslog_parsed.severity\n        \n        # Map syslog severity to log level\n        sev = to_int(syslog_parsed.severity) ?? 0\n        if sev <= 3 { \n            .log.level = \"error\"\n            .event_data.ecs_log_level = \"error\"\n        }\n        if sev == 4 { \n            .log.level = \"warn\"\n            .event_data.ecs_log_level = \"warn\"\n        }\n        if sev >= 5 { \n            .log.level = \"info\"\n            .event_data.ecs_log_level = \"info\"\n        }\n    }\n    \n    # ===== FACILITY MAPPING =====\n    if exists(syslog_parsed.facility) { \n        .log.syslog.facility.code = syslog_parsed.facility\n        .event_data.parsed_facility = syslog_parsed.facility\n        .event_data.ecs_log_syslog_facility_code = syslog_parsed.facility\n    }\n    \n    # ===== MESSAGE ID MAPPING =====\n    if exists(syslog_parsed.msgid) { \n        .event.id = syslog_parsed.msgid\n        .event_data.parsed_msgid = syslog_parsed.msgid\n        .event_data.ecs_event_id = syslog_parsed.msgid\n    }\n    \n    # ===== VERSION MAPPING =====\n    if exists(syslog_parsed.version) { \n        .event_data.parsed_version = syslog_parsed.version\n        .event_data.ecs_version = syslog_parsed.version\n    }\n    \n    # ===== STRUCTURED DATA MAPPING =====\n    if exists(syslog_parsed.structured_data) { \n        .event_data.parsed_structured_data = syslog_parsed.structured_data\n        .event_data.ecs_structured_data = syslog_parsed.structured_data\n    }\n}\n\n##################################################\n### Extract additional fields from message\n##################################################\nif exists(.message) {\n    msg = string!(.message)\n    \n    # Extract IP addresses using GROK\n    ip_match, err = parse_grok(msg, \"%{IP:source_ip}\")\n    if err == null && exists(ip_match.source_ip) {\n        .source.ip = ip_match.source_ip\n        .event_data.extracted_source_ip = ip_match.source_ip\n        .event_data.ecs_source_ip = ip_match.source_ip\n    }\n    \n    # Extract port numbers using GROK\n    port_match, err = parse_grok(msg, \"port %{INT:port}\")\n    if err == null && exists(port_match.port) {\n        .source.port = to_int(port_match.port) ?? null\n        .event_data.extracted_port = port_match.port\n        .event_data.ecs_source_port = to_int(port_match.port) ?? null\n    }\n    \n    # Extract usernames using GROK\n    user_match, err = parse_grok(msg, \"user %{USERNAME:username}\")\n    if err == null && exists(user_match.username) {\n        .user.name = user_match.username\n        .event_data.extracted_username = user_match.username\n        .event_data.ecs_user_name = user_match.username\n    }\n    \n    # Extract failed password attempts\n    failed_match, err = parse_grok(msg, \"Failed password for %{USERNAME:failed_user} from %{IP:failed_ip}\")\n    if err == null && exists(failed_match.failed_user) {\n        .user.name = failed_match.failed_user\n        .source.ip = failed_match.failed_ip\n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n        .event.outcome = \"failure\"\n        .event_data.extracted_failed_user = failed_match.failed_user\n        .event_data.extracted_failed_ip = failed_match.failed_ip\n        .event_data.ecs_user_name = failed_match.failed_user\n        .event_data.ecs_source_ip = failed_match.failed_ip\n        .event_data.ecs_event_category = [\"authentication\"]\n        .event_data.ecs_event_type = [\"start\"]\n        .event_data.ecs_event_outcome = \"failure\"\n    }\n    \n    # Extract successful logins\n    success_match, err = parse_grok(msg, \"Accepted password for %{USERNAME:success_user} from %{IP:success_ip}\")\n    if err == null && exists(success_match.success_user) {\n        .user.name = success_match.success_user\n        .source.ip = success_match.success_ip\n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n        .event.outcome = \"success\"\n        .event_data.extracted_success_user = success_match.success_user\n        .event_data.extracted_success_ip = success_match.success_ip\n        .event_data.ecs_user_name = success_match.success_user\n        .event_data.ecs_source_ip = success_match.success_ip\n        .event_data.ecs_event_category = [\"authentication\"]\n        .event_data.ecs_event_type = [\"start\"]\n        .event_data.ecs_event_outcome = \"success\"\n    }\n    \n    # Detect event categories based on message content\n    if contains(msg, \"authentication\") || contains(msg, \"login\") || contains(msg, \"password\") {\n        .event.category = [\"authentication\"]\n        .event.type = [\"start\"]\n        .event_data.ecs_event_category = [\"authentication\"]\n        .event_data.ecs_event_type = [\"start\"]\n    }\n    \n    if contains(msg, \"network\") || contains(msg, \"connection\") || contains(msg, \"connect\") {\n        .event.category = [\"network\"]\n        .event.type = [\"connection\"]\n        .event_data.ecs_event_category = [\"network\"]\n        .event_data.ecs_event_type = [\"connection\"]\n    }\n    \n    if contains(msg, \"file\") || contains(msg, \"access\") || contains(msg, \"read\") || contains(msg, \"write\") {\n        .event.category = [\"file\"]\n        .event.type = [\"access\"]\n        .event_data.ecs_event_category = [\"file\"]\n        .event_data.ecs_event_type = [\"access\"]\n    }\n    \n    # Detect success/failure based on message content\n    if contains(msg, \"failed\") || contains(msg, \"failure\") || contains(msg, \"error\") || contains(msg, \"denied\") {\n        .event.outcome = \"failure\"\n        .event_data.ecs_event_outcome = \"failure\"\n    }\n    \n    if contains(msg, \"success\") || contains(msg, \"accepted\") || contains(msg, \"completed\") || contains(msg, \"allowed\") {\n        .event.outcome = \"success\"\n        .event_data.ecs_event_outcome = \"success\"\n    }\n    \n    # Detect protocols\n    if contains(msg, \"TCP\") {\n        .network.protocol = \"tcp\"\n        .network.transport = \"tcp\"\n        .event_data.ecs_network_protocol = \"tcp\"\n        .event_data.ecs_network_transport = \"tcp\"\n    }\n    \n    if contains(msg, \"UDP\") {\n        .network.protocol = \"udp\"\n        .network.transport = \"udp\"\n        .event_data.ecs_network_protocol = \"udp\"\n        .event_data.ecs_network_transport = \"udp\"\n    }\n    \n    if contains(msg, \"HTTP\") {\n        .network.protocol = \"http\"\n        .network.application = \"http\"\n        .event_data.ecs_network_protocol = \"http\"\n        .event_data.ecs_network_application = \"http\"\n    }\n    \n    if contains(msg, \"HTTPS\") {\n        .network.protocol = \"https\"\n        .network.application = \"https\"\n        .event_data.ecs_network_protocol = \"https\"\n        .event_data.ecs_network_application = \"https\"\n    }\n    \n    # Extract SSH connections\n    ssh_match, err = parse_grok(msg, \"SSH connection from %{IP:ssh_ip}\")\n    if err == null && exists(ssh_match.ssh_ip) {\n        .source.ip = ssh_match.ssh_ip\n        .network.protocol = \"ssh\"\n        .event.category = [\"network\"]\n        .event.type = [\"connection\"]\n        .event_data.extracted_ssh_ip = ssh_match.ssh_ip\n        .event_data.ecs_source_ip = ssh_match.ssh_ip\n        .event_data.ecs_network_protocol = \"ssh\"\n        .event_data.ecs_event_category = [\"network\"]\n        .event_data.ecs_event_type = [\"connection\"]\n    }\n    \n    # Extract service names from common patterns\n    service_match, err = parse_grok(msg, \"%{WORD:service_name}\")\n    if err == null && exists(service_match.service_name) {\n        service_name = string!(service_match.service_name)\n        if service_name == \"sshd\" || service_name == \"apache\" || service_name == \"nginx\" || service_name == \"mysql\" {\n            .service.name = service_name\n            .event_data.extracted_service_name = service_name\n            .event_data.ecs_service_name = service_name\n        }\n    }\n}\n\n##################################################\n### Related entities\n##################################################\n.related.ip = []\n.related.user = []\n.related.hosts = []\n\nif exists(.source.ip) { .related.ip = push(.related.ip, .source.ip) }\nif exists(.destination.ip) { .related.ip = push(.related.ip, .destination.ip) }\nif exists(.user.name) { .related.user = push(.related.user, .user.name) }\nif exists(.source.user.name) { .related.user = push(.related.user, .source.user.name) }\nif exists(.destination.user.name) { .related.user = push(.related.user, .destination.user.name) }\nif exists(.host.hostname) { .related.hosts = push(.related.hosts, .host.hostname) }\nif exists(.host.name) { .related.hosts = push(.related.hosts, .host.name) }\n\n.related.ip = unique(flatten(.related.ip))\n.related.user = unique(flatten(.related.user))\n.related.hosts = unique(flatten(.related.hosts))\n\n##################################################\n### Timestamp and metadata\n##################################################\nif !exists(.@timestamp) {\n    .@timestamp = now()\n}\n\nif !exists(.event.created) {\n    .event.created = now()\n}\n\n.log.original = raw\n\n##################################################\n### Compact final object\n##################################################\n. = compact(., string: true, array: true, object: true, null: true)\n"
    }
  },
  "validation": {
    "JSON": {
      "success": false,
      "returncode": 78,
      "stdout": "Failed to load [\"/var/folders/dr/k7n_k6wj3lg36lqztmsc604h0000gp/T/tmpy27wofi4.vrl\"]\n-----------------------------------------------------------------------------------\nx TOML parse error at line 7, column 4\n  |\n7 | if !exists(.observer.type) { .observer.type = \"application\" }\n  |    ^\nexpected `.`, `=`\n\n\n",
      "stderr": "",
      "parser_name": "JSON"
    },
    "CEF": {
      "success": false,
      "returncode": 78,
      "stdout": "Failed to load [\"/var/folders/dr/k7n_k6wj3lg36lqztmsc604h0000gp/T/tmpp8ixrqht.vrl\"]\n-----------------------------------------------------------------------------------\nx TOML parse error at line 7, column 4\n  |\n7 | if !exists(.observer.type) { .observer.type = \"security\" }\n  |    ^\nexpected `.`, `=`\n\n\n",
      "stderr": "",
      "parser_name": "CEF"
    },
    "SYSLOG": {
      "success": false,
      "returncode": 78,
      "stdout": "Failed to load [\"/var/folders/dr/k7n_k6wj3lg36lqztmsc604h0000gp/T/tmp8_g_7_b_.vrl\"]\n-----------------------------------------------------------------------------------\nx TOML parse error at line 7, column 4\n  |\n7 | if !exists(.observer.type) { .observer.type = \"system\" }\n  |    ^\nexpected `.`, `=`\n\n\n",
      "stderr": "",
      "parser_name": "SYSLOG"
    }
  }
}