
# JSON Handler - Always included for JSON logs
if exists(.message) && is_json(string!(.message)) {
    .event.original = del(.message)
    parsed, err = parse_json(string!(.event.original))
    if err == null {
        .event_data = object!(parsed)
    }
} else if is_string(.message) {
    .event.original = del(.message)
    .event_data = .event.original
} else if !exists(.message) {
    parsed = object(.); del(.); .event = {}
    .event.original = encode_json(parsed)
    .event_data = parsed
}

# Initialize event_data if not exists
if !exists(.event_data) {
    .event_data = {}
}


# Comprehensive VRL Parser - Commons Snippet
# Based on reference Cisco WLC parser structure

# JSON Parsing & Data Structure
if exists(.message) {
    parsed, err = parse_json(string!(.message))
    if err == null {
        ._json = object!(parsed)
    }
} else {
    parsed = object(.)
    . |= object(parsed)
}

# ECS Field Initialization
if !exists(.observer.type) { .observer.type = "wireless" }
if !exists(.observer.vendor) { .observer.vendor = "cisco" }
if !exists(.observer.product) { .observer.product = "wlc" }

# Environment Variables & Metadata
if !exists(.uuid) { .uuid = uuid_v4() }
if !exists(.organization.id) { .organization.id = get_env_var("ORG_CODE") ?? "" }
if !exists(.sensor.id) { .sensor.id = get_env_var("SENSOR_ID") ?? "" }

# Message Cleaning
if exists(.message) && is_string(.message) {
    .message = replace!(.message, "'", "") 
    .message = replace!(.message, "\\(", "") 
    .message = replace!(.message, "\\)", "") 
}

# Initialize event_data if not exists
if !exists(.event_data) {
    .event_data = {}
}

# Set event.original from message if not already set
if !exists(.event.original) && exists(.message) {
    .event.original = del(.message)
}

# ECS field initialization (only if needed)
# Removed hardcoded basic fields - let the parser determine these dynamically

# Clean up event.original
if exists(.event.original) && !is_null(.event.original) {
    .event.original = replace(string!(.event.original), "\r", "")
    .event.original = replace(string(.event.original), "\n", "")
}

# Final cleanup
. = compact(., string: true, array: true, object: true, null: true)

# Parse event.created timestamp if it exists
if exists(.event.created) {
    # Handle ISO format timestamps
    if match(string!(.event.created), r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}") {
        .event.created = parse_timestamp!(.event.created, format: "%Y-%m-%dT%H:%M:%S%.3fZ")
        .event.created = format_timestamp!(.event.created, format: "%Y-%m-%dT%H:%M:%S%.3fZ")
    }
    # Handle other common formats
    else if match(string!(.event.created), r"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}") {
        .event.created = parse_timestamp!(.event.created, format: "%Y-%m-%d %H:%M:%S")
        .event.created = format_timestamp!(.event.created, format: "%Y-%m-%dT%H:%M:%S%.3fZ")
    }
}

# Format-Specific VRL Parser
# Comprehensive parsing logic based on reference structure

# Pattern-Specific Parsing with Grok
if exists(.message) && contains!(.message, "WLC-customername01") {
    ._grk, err = parse_grok((.message),
        "<%{POSINT}>%{DATA} %{TIME} %{IP} %{DATA:servername}: %{DATA:eventtype}: %{MONTH:wlcmonth} %{MONTHDAY:wlcday} %{TIME:wlctime}.%{INT}: %{DATA:objecttype}: %{DATA}:%{INT} %{GREEDYDATA:wlcdata}"
    )
    .wlcdate, err = "2017" + "-" + ._grk.wlcmonth + "-" + ._grk.wlcday + "-" + ._grk.wlctime

} else if exists(.message) && contains!(.message, "radiusTransportThread:") && contains!(.message, "WLC:") {
    ._grk, err = parse_grok((.message),
        "<%{POSINT}>%{DATA} %{TIME} %{IP} %{DATA:servername}: %{DATA:eventtype}: %{MONTH:wlcmonth} %{MONTHDAY:wlcday} %{TIME:wlctime}.%{INT}: %{DATA:objecttype}: %{DATA}:%{INT} %{GREEDYDATA:wlcdata}"
    )
    .wlcdate, err = "2017" + "-" + ._grk.wlcmonth + "-" + ._grk.wlcday + "-" + ._grk.wlctime
    log_string1 = to_string!(._grk.wlcdata)
    split_parts1 = split(log_string1, " ")
    ._grk.wlcdata = split_parts1

    if !exists(.username) { .username = ._grk.wlcdata[14] }
    if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] + " " + ._grk.wlcdata[3] + " " + ._grk.wlcdata[4] + " " + ._grk.wlcdata[5] }
    if !exists(.hostname) { .hostname = ._grk.wlcdata[11] }
    if !exists(.ipaddr) { .ipaddr = ._grk.wlcdata[2] }

    log_string2 = to_string!(._grk.ipaddr)
    split_parts2 = split(log_string2, ":")
    .ipaddr = split_parts2
    ._grk.ipaddress = .ipaddr[0]

} else if exists(.message) && contains!(.message, "ewmwebWebauth1:") && contains!(.message, "WLC:") {
    ._grk, err = parse_grok((.message),
        "<%{POSINT}>%{DATA} %{TIME} %{IP} %{DATA:servername}: %{DATA:eventtype}: %{MONTH:wlcmonth} %{MONTHDAY:wlcday} %{TIME:wlctime}.%{INT}: %{DATA:objecttype}: %{DATA}:%{INT} %{GREEDYDATA:wlcdata}"
    )
    .wlcdate, err = "2017" + "-" + ._grk.wlcmonth + "-" + ._grk.wlcday + "-" + ._grk.wlctime

    log_string1 = to_string!(._grk.wlcdata)
    split_parts1 = split(log_string1, " ")
    ._grk.wlcdata = split_parts1

    if exists(.objecttype) && contains!(.objecttype, "%APF-6-USER_NAME_CREATED") || contains!(.objecttype, "%APF-6-USER_NAME_DELETED") {
        if !exists(.username) { .username = ._grk.wlcdata[2] }
        if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] + " " + ._grk.wlcdata[3] + " " + ._grk.wlcdata[4] + " " + ._grk.wlcdata[5] + " " + ._grk.wlcdata[6] }
        if !exists(.hostname) { .hostname = ._grk.wlcdata[7] }
    }
    if exists(.objecttype) && contains!(.objecttype, "%AAA-5-AAA_AUTH_NETWORK_USER") {
        if !exists(.username) { .username = ._grk.wlcdata[5] }
        if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] }
    }

} else if exists(.message) && contains!(.message, "emWeb:") {
    .wlcdate, err = "2017" + "-" + ._grk.wlcmonth + "-" + ._grk.wlcday + "-" + ._grk.wlctime

    log_string1 = to_string!(._grk.wlcdata)
    split_parts1 = split(log_string1, " ")
    ._grk.wlcdata = split_parts1

    if exists(.objecttype) && contains!(.objecttype, "%AAA-5-AAA_AUTH_ADMIN_USER") {
        if !exists(.username) { .username = ._grk.wlcdata[5] }
        if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] }
        if !exists(.hostname) { .hostname = ._grk.wlcdata[7] }
    }
    if exists(.objecttype) && contains!(.objecttype, "%APF-6-USER_NAME_DELETED") {
        if !exists(.username) { .username = ._grk.wlcdata[2] }
        if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] + " " + ._grk.wlcdata[3] + " " + ._grk.wlcdata[4] }
        if !exists(.hostname) { .hostname = ._grk.wlcdata[7] }
    }
    if exists(.objecttype) && contains!(.objecttype, "%PEM-6-GUESTOUT") {
        if !exists(.username) { .username = ._grk.wlcdata[2] }
        if !exists(.eventdesc) { .eventdesc, err = ._grk.wlcdata[0] + " " + ._grk.wlcdata[1] + " " + ._grk.wlcdata[3] + " " + ._grk.wlcdata[4] }
        if !exists(.hostname) { .hostname = ._grk.wlcdata[7] }
    }

} else {
    # Fallback with multiple grok patterns
    ._grk, err = parse_groks((.message), [
        ".*<%{INT:syslogpri}>%{SYSLOGTIMESTAMP:timestamp}\\s*%{IP:hostip}\\s*%{DATA:hostname}:\\s*(\\*|)%{DATA:thread_name}:\\s*%{SYSLOGTIMESTAMP}:%{DATA:msg}:\\s*%{GREEDYDATA:description}.*",
        ".*%{TIMESTAMP_ISO8601:timestamp}\\s*%{IP:hostip}\\s*%{DATA:hostname}:\\s*(\\*|)%{DATA:thread_name}:\\s*%{SYSLOGTIMESTAMP}:%{DATA:msg}:\\s*%{GREEDYDATA:description}.*",
        ".*%{SYSLOGTIMESTAMP:timestamp}\\s*%{IP:hostip}\\s*%{DATA:hostname}:\\s*(\\*|)%{DATA:thread_name}:\\s*%{SYSLOGTIMESTAMP}:%{DATA:msg}:\\s*%{GREEDYDATA:description}.*"
    ])

    if exists(._grk.description) {
        ._grk1, err = parse_grok((._grk.description),
            "%{DATA:filename}:%{INT:id}%{DATA:message}%{MAC:src_mac}.\\s*%{GREEDYDATA:reason}(\\.|)"
        )
    }
    if exists(._grk.msg) {
        ._grk2, err = parse_grok((._grk.msg),
            "%{WORD:facility}-%{INT:severity}-%{GREEDYDATA:status}"
        )
    }

    # Field Mapping to ECS
    if exists(._grk.syslogpri) { .log.syslog.priority = del(._grk.syslogpri) }
    if exists(._grk.hostip) { .host.ip = del(._grk.hostip) }
    if exists(._grk.hostname) { .host.name = del(._grk.hostname) }
    if exists(._grk.msg) { .event_data.message = del(._grk.msg) }
    if exists(._grk1.src_mac) { .source.mac = del(._grk1.src_mac) }
    if exists(._grk1.reason) { .event.reason = del(._grk1.reason) }
    if exists(._grk.thread_name) { .process.thread.name = del(._grk.thread_name) }
    if exists(._grk.username) { .user.name = del(._grk.username) }
    if exists(._grk.eventdesc) { .event.description = del(._grk.eventdesc) }
    if exists(._grk.description) { .event.description = del(._grk.description) }
    if exists(._grk.servername) { .server.name = del(._grk.servername) }
    if exists(._grk.eventdate) { .event.created = del(._grk.eventdate) }
    if exists(._grk.logEventId) { .event.id = del(._grk.logEventId) }
    if exists(._grk2.facility) { .event.provider = del(._grk2.facility) }
    if exists(._grk2.status) { .event.action = del(._grk2.status) }
    if exists(._grk2.severity) { .event.severity = del(._grk2.severity) }
    if exists(._grk.eventId) { .event.id = del(._grk.eventId) }
    if exists(._grk1.filename) { .log.origin.file.name = del(._grk1.filename) }
    if exists(._grk1.id) { .log.origin.file.line = del(._grk1.id) }
    if exists(.username) { .user.name = del(.username) }
    if exists(.eventdesc) { .event.description = del(.eventdesc) }
    if exists(.hostname) { .host.name = del(.hostname) }
    if exists(.uuid) { .event.id = .uuid }

    if !exists(.log.timezone) { .log.timezone = "UTC" }

    if exists(._grk.timestamp) {
        . |= parse_syslog!(._grk.timestamp)
        .event.created = format_timestamp!(del(.timestamp), format: "%FT%T%.3fZ")
    }

    if exists(._grk1.message) { .message = ._grk1.message }
}

# Cleanup temporary fields
del(._grk)
del(._grk1)
del(._grk2)

# Final cleanup
. = compact(., string: true, array: true, null: true)


# Final cleanup and validation
. = compact(., string: true, array: true, object: true, null: true)