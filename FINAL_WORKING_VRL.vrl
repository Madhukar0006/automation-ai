##################################################
## VRL Parser - IPA HTTPD Error Log (Working)
##################################################

### Parse log message
raw = to_string(.message) ?? to_string(.) ?? ""

### Simple pattern for IPA HTTPD log
pattern = "<%{POSINT:priority}>%{INT:version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:appname} - - - %{GREEDYDATA:message}"

parsed, err = parse_grok(raw, pattern)

### Error handling
if err != null {
  .error = "Parse failed"
  .event.outcome = "failure"
  .log.level = "error"
  . = compact(.)
}

### Extract basic fields
if exists(parsed.timestamp) { .@timestamp = parse_timestamp(del(parsed.timestamp), "%Y-%m-%dT%H:%M:%S%.3f%z") ?? now() }
if exists(parsed.hostname) { .host.name = del(parsed.hostname) }
if exists(parsed.appname) { .service.name = del(parsed.appname) }
if exists(parsed.message) { .message = del(parsed.message) }

### Set ECS fields
.observer.type = "application"
.event.dataset = "ipa.httpd.error"
.event.category = ["web", "authentication"]
.event.kind = "event"
.event.type = ["info"]

### Set event outcome
if exists(.log.level) {
  if .log.level == "ERROR" {
    .event.outcome = "failure"
  } else if .log.level == "INFO" {
    .event.outcome = "success"
  } else {
    .event.outcome = "unknown"
  }
} else {
  .event.outcome = "success"
}

### Final cleanup
. = compact(.)

