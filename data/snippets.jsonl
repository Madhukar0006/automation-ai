{"type": "vrl_snippet", "category": "parsing", "title": "Syslog Parsing", "snippet": "if exists(.event.original) {\n  parsed, err = parse_syslog(.event.original)\n  if err == null && is_object(parsed) { . = merge(., parsed) }\n}", "description": "Parses RFC3164 or RFC5424 syslog messages into ECS fields like timestamp, hostname, appname, pid, message."}
{"type": "vrl_snippet", "category": "parsing", "title": "JSON Parsing", "snippet": "if exists(.event.original) {\n  j, err = parse_json(.event.original)\n  if err == null && is_object(j) { . = merge(., j) }\n}", "description": "Parses JSON logs directly into fields while preserving ECS mappings."}
{"type": "vrl_snippet", "category": "parsing", "title": "Grok Parsing", "snippet": "if exists(.event.original) {\n  g, _ = parse_groks(.event.original, [\"%{IP:source.ip} %{WORD:http.method} %{URIPATHPARAM:http.path}\"])\n  if g != null { . = merge(., g) }\n}", "description": "Parses unstructured text logs into ECS fields using grok patterns."}
{"type": "vrl_snippet", "category": "parsing", "title": "Key-Value Parsing", "snippet": "if exists(.event.original) {\n  kvs, err = parse_key_value(.event.original)\n  if err == null && is_object(kvs) { . = merge(., kvs) }\n}", "description": "Extracts key-value pairs like user=alice src=1.2.3.4 into ECS-compatible fields."}
{"type": "vrl_snippet", "category": "type_casting", "title": "Type Casting Integers and Floats", "snippet": "if exists(.source.port) { .source.port = to_int!(.source.port) }\nif exists(.event.duration) { .event.duration = to_float!(.event.duration) }", "description": "Casts extracted string values into integers or floats for ECS compliance."}
{"type": "vrl_snippet", "category": "timestamps", "title": "Extract and Format Timestamp", "snippet": "if exists(.ts) {\n  .ts = to_string!(.ts)\n  .event.created = to_string!(format_timestamp!(parse_timestamp!(.ts, \"%Y-%m-%d %H:%M:%S\"), \"%FT%TZ\"))\n}", "description": "Parses a custom timestamp field and maps it to ECS field `.event.created` in ISO8601."}
{"type": "vrl_snippet", "category": "ecs_mapping", "title": "Field Mapping to ECS", "snippet": "if exists(.src_ip) { .source.ip = del(.src_ip) }\nif exists(.dst_port) { .destination.port = to_int!(del(.dst_port)) }", "description": "Maps vendor-specific field names to ECS-compatible names while preserving types."}
{"type": "vrl_snippet", "category": "ecs_mapping", "title": "Process and Host Mapping", "snippet": "if exists(.proc_name) { .process.name = del(.proc_name) }\nif exists(.hostname) { .host.hostname = del(.hostname) }", "description": "Maps process and host fields from vendor logs into ECS schema."}
{"type": "vrl_snippet", "category": "conditionals", "title": "Conditional Logic Example", "snippet": "if exists(.status) {\n  if .status == \"FAILED\" { .event.outcome = \"failure\" } else { .event.outcome = \"success\" }\n}", "description": "Sets `.event.outcome` based on parsed log status values."}
{"type": "vrl_snippet", "category": "arrays", "title": "Building Related IPs Array", "snippet": ".related.ip = []\ntmp_ips, _ = parse_groks(to_string!(.event.original), [\"%{IPV4:ip}\", \"%{IPV6:ip}\"])\nif is_array(tmp_ips) && length(tmp_ips) > 0 {\n  .related.ip = unique!(compact(map_values!(tmp_ips, |v| v.ip)))\n}", "description": "Combines multiple IP fields into a deduplicated `.related.ip` ECS array."}
{"type": "vrl_snippet", "category": "arrays", "title": "Collect Related Hosts", "snippet": ".related.hosts = unique!(compact([.host.name, .source.hostname, .destination.hostname]))", "description": "Collects related hostnames into `.related.hosts` array."}
{"type": "vrl_snippet", "category": "cleanup", "title": "Remove Temporary Fields", "snippet": "del(.raw)\ndel(.temp_field)", "description": "Deletes unnecessary fields after parsing to keep ECS mapping clean."}
{"type": "vrl_snippet", "category": "cleanup", "title": "Final Compact", "snippet": ". = compact(., nullish: true)", "description": "Cleans up null, empty, or redundant fields in the final ECS event."}
{"type": "vrl_snippet", "category": "metadata", "title": "Add ECS Version and Metadata", "snippet": ".ecs.version = \"8.11.0\"\nif exists(.event.severity) { .log.level = to_syslog_level(to_int!(.event.severity)) }", "description": "Adds ECS version and maps severity to `.log.level`."}
