# Comprehensive VRL Parser - Commons Snippet
# Based on reference Cisco WLC parser structure

# JSON Parsing & Data Structure
if exists(.message) {
    parsed, err = parse_json(string!(.message))
    if err == null {
        ._json = object!(parsed)
    }
} else {
    parsed = object(.)
    . |= object(parsed)
}

# ECS Field Initialization
if !exists(.observer.type) { .observer.type = "wireless" }
if !exists(.observer.vendor) { .observer.vendor = "cisco" }
if !exists(.observer.product) { .observer.product = "wlc" }

# Environment Variables & Metadata
if !exists(.uuid) { .uuid = uuid_v4() }
if !exists(.organization.id) { .organization.id = get_env_var("ORG_CODE") ?? "" }
if !exists(.sensor.id) { .sensor.id = get_env_var("SENSOR_ID") ?? "" }

# Message Cleaning
if exists(.message) && is_string(.message) {
    .message = replace!(.message, "'", "") 
    .message = replace!(.message, "\\(", "") 
    .message = replace!(.message, "\\)", "") 
}

# Initialize event_data if not exists
if !exists(.event_data) {
    .event_data = {}
}

# Set event.original from message if not already set
if !exists(.event.original) && exists(.message) {
    .event.original = del(.message)
}

# ECS field initialization (only if needed)
# Removed hardcoded basic fields - let the parser determine these dynamically

# Clean up event.original
if exists(.event.original) && !is_null(.event.original) {
    .event.original = replace(string!(.event.original), "\r", "")
    .event.original = replace(string(.event.original), "\n", "")
}

# Final cleanup
. = compact(., string: true, array: true, object: true, null: true)