# Comprehensive timestamp parsing for various log formats
# Expects .event.original to exist (raw log line)

# Try to extract timestamp from the log
if exists(.event.original) {
    # CheckPoint timestamp format: 2020-03-29T13:19:21Z
    if parse_groks(.event.original, ["%{TIMESTAMP_ISO8601:timestamp}"]) {
        .event.created = to_string!(parse_timestamp!(.timestamp, "%Y-%m-%dT%H:%M:%SZ"), format: "%FT%T%.3fZ")
    }
    # RFC3164 syslog timestamp: Mar 29 13:19:21
    else if parse_groks(.event.original, ["%{SYSLOGTIMESTAMP:timestamp}"]) {
        .event.created = to_string!(parse_timestamp!(.timestamp, "%b %d %H:%M:%S"), format: "%FT%T%.3fZ")
    }
    # Unix timestamp (seconds since epoch)
    else if parse_groks(.event.original, ["%{NUMBER:timestamp}"]) {
        .event.created = to_string!(parse_timestamp!(.timestamp, "unix"), format: "%FT%T%.3fZ")
    }
    # Apache timestamp: [29/Mar/2020:13:19:21 +0000]
    else if parse_groks(.event.original, ["\\[%{HTTPDATE:timestamp}\\]"]) {
        .event.created = to_string!(parse_timestamp!(.timestamp, "%d/%b/%Y:%H:%M:%S %z"), format: "%FT%T%.3fZ")
    }
    # Windows Event Log timestamp
    else if parse_groks(.event.original, ["%{TIMESTAMP_ISO8601:timestamp}"]) {
        .event.created = to_string!(parse_timestamp!(.timestamp, "%Y-%m-%dT%H:%M:%S.%LZ"), format: "%FT%T%.3fZ")
    }
    # Fallback to current time
    else {
        .event.created = to_string!(format_timestamp!(now(), "%FT%T%.3fZ"))
    }
} else {
    # No original log, use current time
    .event.created = to_string!(format_timestamp!(now(), "%FT%T%.3fZ"))
}

# Cleanup
del(.timestamp)
